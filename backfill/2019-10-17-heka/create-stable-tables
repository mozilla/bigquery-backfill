#!/bin/bash

source $(dirname $0)/env

cd $(dirname $0)

DATASET=telemetry_stable
: "${SKIP_EXISTING:=1}"
: "${OVERWRITE:=}"

# globals
total=0
skip=0
error=0

function update_table() {
    # Arguments:
    #   $1 - dataset name
    #   $2 - path to the document in format `{namespace}.{type}.{version}.bq`
    #
    # Options via envvar
    #   $SKIP_EXISTING  - skip if exists
    #   $OVERWRITE - remove and create if exists
    #
    # Counters:
    #   $total - the total number of documents seen
    #   $skip  - the number of documents that have been skipped
    #   $error - the number of errors encountered
    local dataset=$1
    local document=$2
    ((total++))

    # downcase hyphens to underscores before generating names
    bq_document=$(basename "${document}" | sed 's/-/_/g')
    namespace=$(echo "${bq_document}" | cut -d. -f1)
    doctype=$(echo "${bq_document}" | cut -d. -f2)
    docver=$(echo "${bq_document}" | cut -d. -f3)

    bq mk --table \
        --schema "${document}" \
        --time_partitioning_field submission_timestamp \
        --clustering_fields normalized_channel,sample_id \
        "${PROJECT}:${dataset}.${doctype}_v${docver}" ||
        bq update --table \
           --schema "${document}" \
           --time_partitioning_field submission_timestamp \
           --clustering_fields normalized_channel,sample_id \
           "${PROJECT}:${dataset}.${doctype}_v${docver}"

    if [[ $? ]]; then
        ((error++))
    fi
}

function update_table_timestamp() {
    # Arguments:
    #   $1 - dataset name
    #   $2 - path to the document in format `{namespace}.{type}.{version}.bq`
    #
    # Options via envvar
    #   $SKIP_EXISTING  - skip if exists
    #   $OVERWRITE - remove and create if exists
    #
    # Counters:
    #   $total - the total number of documents seen
    #   $skip  - the number of documents that have been skipped
    #   $error - the number of errors encountered
    local dataset=$1
    local document=$2
    ((total++))

    # downcase hyphens to underscores before generating names
    bq_document=$(basename "${document}" | sed 's/-/_/g')
    namespace=$(echo "${bq_document}" | cut -d. -f1)
    doctype=$(echo "${bq_document}" | cut -d. -f2)
    docver=$(echo "${bq_document}" | cut -d. -f3)

    bq mk --table \
        --schema "${document}" \
        --time_partitioning_field submission_timestamp \
        --clustering_fields submission_timestamp \
        "${PROJECT}:${dataset}.${doctype}_v${docver}" ||
        bq update --table \
           --schema "${document}" \
           --time_partitioning_field submission_timestamp \
           --clustering_fields submission_timestamp \
           "${PROJECT}:${dataset}.${doctype}_v${docver}"

    if [[ $? ]]; then
        ((error++))
    fi
}

function main() {
    if [[ -n ${OVERWRITE} ]]; then
        echo "running bq rm for ${PROJECT}:${DATASET}"
        bq rm -rf "${PROJECT}:${DATASET}"
    fi

    if ! bq ls ${PROJECT}:${DATASET} > /dev/null; then
        echo "creating dataset: ${PROJECT}:${DATASET}"
        bq mk "${PROJECT}:${DATASET}"
    fi

    documents=$(find bq-schemas -type file | sort | grep telemetry)
    trap "exit" INT
    for document in ${documents}; do
        update_table "${DATASET}" "${document}"
    done
    update_table_timestamp "${DATASET}" bq-schemas/metadata.error.1.bq

    echo "$((total-skip-error))/${total} sucessfully updated, ${skip} skipped, ${error} errors."
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
