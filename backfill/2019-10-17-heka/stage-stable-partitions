#!/bin/bash

set -eo pipefail

source $(dirname $0)/env

cd $(dirname $0)

# globals
total=0
skip=0
error=0

function update_table() {
    # Arguments:
    #   $1 - dataset name
    #   $2 - path to the document in format `{namespace}.{type}.{version}.bq`
    #
    # Options via envvar
    #   $SKIP_EXISTING  - skip if exists
    #   $OVERWRITE - remove and create if exists
    #
    # Counters:
    #   $total - the total number of documents seen
    #   $skip  - the number of documents that have been skipped
    #   $error - the number of errors encountered
    local dataset=$1
    local document=$2
    ((total++))

    # downcase hyphens to underscores before generating names
    bq_document=$(basename "${document}" | sed 's/-/_/g')
    namespace=$(echo "${bq_document}" | cut -d. -f1)
    doctype=$(echo "${bq_document}" | cut -d. -f2)
    docver=$(echo "${bq_document}" | cut -d. -f3)

    src_table="moz-fx-data-backfill-${DAYNUM}:telemetry_stable.${doctype}_v${docver}"
    dst_table="backfill-test-252723:telemetry_stable.${doctype}_v${docver}"

    # echo "Removing $live_table\$$DT"
    # bq rm --force "$live_table\$$DT"

    bq cp --force "${src_table}\$$DT" "${dst_table}\$$DT"

}

function main() {
    documents=$(find bq-schemas -type file | sort | grep main\.4)
    trap "exit" INT
    for document in ${documents}; do
        update_table "foo" "${document}"
    done

    echo "$((total-skip-error))/${total} sucessfully updated, ${skip} skipped, ${error} errors."
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]; then
    main "$@"
fi
